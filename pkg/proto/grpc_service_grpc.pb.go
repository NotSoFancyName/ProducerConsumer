// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/proto/grpc_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskProducerClient is the client API for TaskProducer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskProducerClient interface {
	GetTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (TaskProducer_GetTaskClient, error)
	NotifyTaskFinished(ctx context.Context, in *TaskFinishedRequest, opts ...grpc.CallOption) (*TaskFinishedResponse, error)
}

type taskProducerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskProducerClient(cc grpc.ClientConnInterface) TaskProducerClient {
	return &taskProducerClient{cc}
}

func (c *taskProducerClient) GetTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (TaskProducer_GetTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskProducer_ServiceDesc.Streams[0], "/proto.TaskProducer/GetTaskQueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskProducerGetTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskProducer_GetTaskClient interface {
	Recv() (*TaskResponse, error)
	grpc.ClientStream
}

type taskProducerGetTaskClient struct {
	grpc.ClientStream
}

func (x *taskProducerGetTaskClient) Recv() (*TaskResponse, error) {
	m := new(TaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskProducerClient) NotifyTaskFinished(ctx context.Context, in *TaskFinishedRequest, opts ...grpc.CallOption) (*TaskFinishedResponse, error) {
	out := new(TaskFinishedResponse)
	err := c.cc.Invoke(ctx, "/proto.TaskProducer/NotifyTaskFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskProducerServer is the service API for TaskProducer service.
// All implementations must embed UnimplementedTaskProducerServer
// for forward compatibility
type TaskProducerServer interface {
	GetTask(*TaskRequest, TaskProducer_GetTaskServer) error
	NotifyTaskFinished(context.Context, *TaskFinishedRequest) (*TaskFinishedResponse, error)
	mustEmbedUnimplementedTaskProducerServer()
}

// UnimplementedTaskProducerServer must be embedded to have forward compatible implementations.
type UnimplementedTaskProducerServer struct {
}

func (UnimplementedTaskProducerServer) GetTask(*TaskRequest, TaskProducer_GetTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskQueue not implemented")
}
func (UnimplementedTaskProducerServer) NotifyTaskFinished(context.Context, *TaskFinishedRequest) (*TaskFinishedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTaskFinished not implemented")
}
func (UnimplementedTaskProducerServer) mustEmbedUnimplementedTaskProducerServer() {}

// UnsafeTaskProducerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskProducerServer will
// result in compilation errors.
type UnsafeTaskProducerServer interface {
	mustEmbedUnimplementedTaskProducerServer()
}

func RegisterTaskProducerServer(s grpc.ServiceRegistrar, srv TaskProducerServer) {
	s.RegisterService(&TaskProducer_ServiceDesc, srv)
}

func _TaskProducer_GetTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskProducerServer).GetTask(m, &taskProducerGetTaskServer{stream})
}

type TaskProducer_GetTaskServer interface {
	Send(*TaskResponse) error
	grpc.ServerStream
}

type taskProducerGetTaskServer struct {
	grpc.ServerStream
}

func (x *taskProducerGetTaskServer) Send(m *TaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskProducer_NotifyTaskFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskFinishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskProducerServer).NotifyTaskFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskProducer/NotifyTaskFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskProducerServer).NotifyTaskFinished(ctx, req.(*TaskFinishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskProducer_ServiceDesc is the grpc.ServiceDesc for TaskProducer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskProducer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TaskProducer",
	HandlerType: (*TaskProducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyTaskFinished",
			Handler:    _TaskProducer_NotifyTaskFinished_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTaskQueue",
			Handler:       _TaskProducer_GetTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/grpc_service.proto",
}
